# Вариант 5

# Цикл for
# исходные данные
i = [0.9, 8.4, 2]
y = 1.6 * (10**(-4))
x = -1
k = 6

import math
print("Результаты первого цикла: ")
print("___________________________")
for index in range(3):
    c = i[index]/k - y ** 0.5 / 0.4
    d = math.exp(1-c) + 4.9 * (x**2 + 1)
    print("i = ",i[index])
    print("c = ", c)
    print("d = ", d)
    print("___________________________")


# Цикл while
# исходные данные: i = 0(0,5)3, значения y, x, k остаются прежними, как в первом случае

print("Результаты второго цикла: ")
print("___________________________")
i = 0
while i <= 3:
    c = i / k - y ** 0.5 / 0.4
    d = math.exp(1 - c) + 4.9 * (x ** 2 + 1)
    print("i = ", i)
    print("c = ", c)
    print("d = ", d)
    print("___________________________")
    i += 0.5


# Двойной цикл
# Исходные данные из условия: x = 1(0,1)2; y = {1,3; -8; 0,2}.
# В формуле необходимо находить квадратный корень из y. В случае y=-8 в качестве квадратного корня
# получается комплексное число и программа выдает ошибку TypeError: can't convert complex to float.
# Поэтому в качестве второго значения y возьмем положительное число 8 -> y = {1,3; 8; 0,2}.
# Значение k остается прежним, как и в первом случае.
# Так как для третьего случая не указано значение i, а также чтобы не делать тройной цикл (взяв, для
# него, к примеру, диапазон значений из первого либо второго случая, возьмем фиксированное значение i=1.

print("Результаты третьего цикла: ")
print("___________________________")
i = 1
y = [1.3, 8, 0.2]
for j in range(3):
    c = i / k - y[j] ** 0.5 / 0.4
    print("y = ", y[j])
    print("c = ", c)
    print("________")
    x = 1
    while x <= 2:
        d = math.exp(1 - c) + 4.9 * (x ** 2 + 1)
        print("x = ", x)
        print("d = ", d)
        x += 0.1
    print("___________________________")
